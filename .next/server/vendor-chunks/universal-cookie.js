"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/universal-cookie";
exports.ids = ["vendor-chunks/universal-cookie"];
exports.modules = {

/***/ "(ssr)/./node_modules/universal-cookie/esm/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/universal-cookie/esm/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cookies)\n/* harmony export */ });\nvar cookie = {};\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ var hasRequiredCookie;\nfunction requireCookie() {\n    if (hasRequiredCookie) return cookie;\n    hasRequiredCookie = 1;\n    /**\n\t * Module exports.\n\t * @public\n\t */ cookie.parse = parse;\n    cookie.serialize = serialize;\n    /**\n\t * Module variables.\n\t * @private\n\t */ var __toString = Object.prototype.toString;\n    var __hasOwnProperty = Object.prototype.hasOwnProperty;\n    /**\n\t * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n\t * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n\t * which has been replaced by the token definition in RFC 7230 appendix B.\n\t *\n\t * cookie-name       = token\n\t * token             = 1*tchar\n\t * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n\t *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n\t *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n\t */ var cookieNameRegExp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n    /**\n\t * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n\t *\n\t * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n\t * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n\t *                     ; US-ASCII characters excluding CTLs,\n\t *                     ; whitespace DQUOTE, comma, semicolon,\n\t *                     ; and backslash\n\t */ var cookieValueRegExp = /^(\"?)[\\u0021\\u0023-\\u002B\\u002D-\\u003A\\u003C-\\u005B\\u005D-\\u007E]*\\1$/;\n    /**\n\t * RegExp to match domain-value in RFC 6265 sec 4.1.1\n\t *\n\t * domain-value      = <subdomain>\n\t *                     ; defined in [RFC1034], Section 3.5, as\n\t *                     ; enhanced by [RFC1123], Section 2.1\n\t * <subdomain>       = <label> | <subdomain> \".\" <label>\n\t * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n\t *                     Labels must be 63 characters or less.\n\t *                     'let-dig' not 'letter' in the first char, per RFC1123\n\t * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n\t * <let-dig-hyp>     = <let-dig> | \"-\"\n\t * <let-dig>         = <letter> | <digit>\n\t * <letter>          = any one of the 52 alphabetic characters A through Z in\n\t *                     upper case and a through z in lower case\n\t * <digit>           = any one of the ten digits 0 through 9\n\t *\n\t * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n\t *\n\t * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n\t * character is not permitted, but a trailing %x2E (\".\"), if present, will\n\t * cause the user agent to ignore the attribute.)\n\t */ var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n    /**\n\t * RegExp to match path-value in RFC 6265 sec 4.1.1\n\t *\n\t * path-value        = <any CHAR except CTLs or \";\">\n\t * CHAR              = %x01-7F\n\t *                     ; defined in RFC 5234 appendix B.1\n\t */ var pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n    /**\n\t * Parse a cookie header.\n\t *\n\t * Parse the given cookie header string into an object\n\t * The object has the various cookies as keys(names) => values\n\t *\n\t * @param {string} str\n\t * @param {object} [opt]\n\t * @return {object}\n\t * @public\n\t */ function parse(str, opt) {\n        if (typeof str !== \"string\") {\n            throw new TypeError(\"argument str must be a string\");\n        }\n        var obj = {};\n        var len = str.length;\n        // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n        if (len < 2) return obj;\n        var dec = opt && opt.decode || decode;\n        var index = 0;\n        var eqIdx = 0;\n        var endIdx = 0;\n        do {\n            eqIdx = str.indexOf(\"=\", index);\n            if (eqIdx === -1) break; // No more cookie pairs.\n            endIdx = str.indexOf(\";\", index);\n            if (endIdx === -1) {\n                endIdx = len;\n            } else if (eqIdx > endIdx) {\n                // backtrack on prior semicolon\n                index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n                continue;\n            }\n            var keyStartIdx = startIndex(str, index, eqIdx);\n            var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n            var key = str.slice(keyStartIdx, keyEndIdx);\n            // only assign once\n            if (!__hasOwnProperty.call(obj, key)) {\n                var valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n                var valEndIdx = endIndex(str, endIdx, valStartIdx);\n                if (str.charCodeAt(valStartIdx) === 0x22 /* \" */  && str.charCodeAt(valEndIdx - 1) === 0x22 /* \" */ ) {\n                    valStartIdx++;\n                    valEndIdx--;\n                }\n                var val = str.slice(valStartIdx, valEndIdx);\n                obj[key] = tryDecode(val, dec);\n            }\n            index = endIdx + 1;\n        }while (index < len);\n        return obj;\n    }\n    function startIndex(str, index, max) {\n        do {\n            var code = str.charCodeAt(index);\n            if (code !== 0x20 /*   */  && code !== 0x09 /* \\t */ ) return index;\n        }while (++index < max);\n        return max;\n    }\n    function endIndex(str, index, min) {\n        while(index > min){\n            var code = str.charCodeAt(--index);\n            if (code !== 0x20 /*   */  && code !== 0x09 /* \\t */ ) return index + 1;\n        }\n        return min;\n    }\n    /**\n\t * Serialize data into a cookie header.\n\t *\n\t * Serialize a name value pair into a cookie string suitable for\n\t * http headers. An optional options object specifies cookie parameters.\n\t *\n\t * serialize('foo', 'bar', { httpOnly: true })\n\t *   => \"foo=bar; httpOnly\"\n\t *\n\t * @param {string} name\n\t * @param {string} val\n\t * @param {object} [opt]\n\t * @return {string}\n\t * @public\n\t */ function serialize(name, val, opt) {\n        var enc = opt && opt.encode || encodeURIComponent;\n        if (typeof enc !== \"function\") {\n            throw new TypeError(\"option encode is invalid\");\n        }\n        if (!cookieNameRegExp.test(name)) {\n            throw new TypeError(\"argument name is invalid\");\n        }\n        var value = enc(val);\n        if (!cookieValueRegExp.test(value)) {\n            throw new TypeError(\"argument val is invalid\");\n        }\n        var str = name + \"=\" + value;\n        if (!opt) return str;\n        if (null != opt.maxAge) {\n            var maxAge = Math.floor(opt.maxAge);\n            if (!isFinite(maxAge)) {\n                throw new TypeError(\"option maxAge is invalid\");\n            }\n            str += \"; Max-Age=\" + maxAge;\n        }\n        if (opt.domain) {\n            if (!domainValueRegExp.test(opt.domain)) {\n                throw new TypeError(\"option domain is invalid\");\n            }\n            str += \"; Domain=\" + opt.domain;\n        }\n        if (opt.path) {\n            if (!pathValueRegExp.test(opt.path)) {\n                throw new TypeError(\"option path is invalid\");\n            }\n            str += \"; Path=\" + opt.path;\n        }\n        if (opt.expires) {\n            var expires = opt.expires;\n            if (!isDate(expires) || isNaN(expires.valueOf())) {\n                throw new TypeError(\"option expires is invalid\");\n            }\n            str += \"; Expires=\" + expires.toUTCString();\n        }\n        if (opt.httpOnly) {\n            str += \"; HttpOnly\";\n        }\n        if (opt.secure) {\n            str += \"; Secure\";\n        }\n        if (opt.partitioned) {\n            str += \"; Partitioned\";\n        }\n        if (opt.priority) {\n            var priority = typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n            switch(priority){\n                case \"low\":\n                    str += \"; Priority=Low\";\n                    break;\n                case \"medium\":\n                    str += \"; Priority=Medium\";\n                    break;\n                case \"high\":\n                    str += \"; Priority=High\";\n                    break;\n                default:\n                    throw new TypeError(\"option priority is invalid\");\n            }\n        }\n        if (opt.sameSite) {\n            var sameSite = typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n            switch(sameSite){\n                case true:\n                    str += \"; SameSite=Strict\";\n                    break;\n                case \"lax\":\n                    str += \"; SameSite=Lax\";\n                    break;\n                case \"strict\":\n                    str += \"; SameSite=Strict\";\n                    break;\n                case \"none\":\n                    str += \"; SameSite=None\";\n                    break;\n                default:\n                    throw new TypeError(\"option sameSite is invalid\");\n            }\n        }\n        return str;\n    }\n    /**\n\t * URL-decode string value. Optimized to skip native call when no %.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */ function decode(str) {\n        return str.indexOf(\"%\") !== -1 ? decodeURIComponent(str) : str;\n    }\n    /**\n\t * Determine if value is a Date.\n\t *\n\t * @param {*} val\n\t * @private\n\t */ function isDate(val) {\n        return __toString.call(val) === \"[object Date]\";\n    }\n    /**\n\t * Try decoding a string using a decoding function.\n\t *\n\t * @param {string} str\n\t * @param {function} decode\n\t * @private\n\t */ function tryDecode(str, decode) {\n        try {\n            return decode(str);\n        } catch (e) {\n            return str;\n        }\n    }\n    return cookie;\n}\nvar cookieExports = requireCookie();\nfunction hasDocumentCookie() {\n    const testingValue = typeof global === \"undefined\" ? undefined : global.TEST_HAS_DOCUMENT_COOKIE;\n    if (typeof testingValue === \"boolean\") {\n        return testingValue;\n    }\n    // Can we get/set cookies on document.cookie?\n    return typeof document === \"object\" && typeof document.cookie === \"string\";\n}\nfunction parseCookies(cookies) {\n    if (typeof cookies === \"string\") {\n        return cookieExports.parse(cookies);\n    } else if (typeof cookies === \"object\" && cookies !== null) {\n        return cookies;\n    } else {\n        return {};\n    }\n}\nfunction readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        } catch (e) {\n        // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === \"j\" && value[1] === \":\") {\n        return value.substr(2);\n    }\n    return value;\n}\nclass Cookies {\n    constructor(cookies, defaultSetOptions = {}){\n        this.changeListeners = [];\n        this.HAS_DOCUMENT_COOKIE = false;\n        this.update = ()=>{\n            if (!this.HAS_DOCUMENT_COOKIE) {\n                return;\n            }\n            const previousCookies = this.cookies;\n            this.cookies = cookieExports.parse(document.cookie);\n            this._checkChanges(previousCookies);\n        };\n        const domCookies = typeof document === \"undefined\" ? \"\" : document.cookie;\n        this.cookies = parseCookies(cookies || domCookies);\n        this.defaultSetOptions = defaultSetOptions;\n        this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n    }\n    _emitChange(params) {\n        for(let i = 0; i < this.changeListeners.length; ++i){\n            this.changeListeners[i](params);\n        }\n    }\n    _checkChanges(previousCookies) {\n        const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n        names.forEach((name)=>{\n            if (previousCookies[name] !== this.cookies[name]) {\n                this._emitChange({\n                    name,\n                    value: readCookie(this.cookies[name])\n                });\n            }\n        });\n    }\n    _startPolling() {\n        this.pollingInterval = setInterval(this.update, 300);\n    }\n    _stopPolling() {\n        if (this.pollingInterval) {\n            clearInterval(this.pollingInterval);\n        }\n    }\n    get(name, options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        return readCookie(this.cookies[name], options);\n    }\n    getAll(options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        const result = {};\n        for(let name in this.cookies){\n            result[name] = readCookie(this.cookies[name], options);\n        }\n        return result;\n    }\n    set(name, value, options) {\n        if (options) {\n            options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n        } else {\n            options = this.defaultSetOptions;\n        }\n        const stringValue = typeof value === \"string\" ? value : JSON.stringify(value);\n        this.cookies = Object.assign(Object.assign({}, this.cookies), {\n            [name]: stringValue\n        });\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookieExports.serialize(name, stringValue, options);\n        }\n        this._emitChange({\n            name,\n            value,\n            options\n        });\n    }\n    remove(name, options) {\n        const finalOptions = options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), {\n            expires: new Date(1970, 1, 1, 0, 0, 1),\n            maxAge: 0\n        });\n        this.cookies = Object.assign({}, this.cookies);\n        delete this.cookies[name];\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = cookieExports.serialize(name, \"\", finalOptions);\n        }\n        this._emitChange({\n            name,\n            value: undefined,\n            options\n        });\n    }\n    addChangeListener(callback) {\n        this.changeListeners.push(callback);\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n            if (false) {} else {\n                this._startPolling();\n            }\n        }\n    }\n    removeChangeListener(callback) {\n        const idx = this.changeListeners.indexOf(callback);\n        if (idx >= 0) {\n            this.changeListeners.splice(idx, 1);\n        }\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n            if (false) {} else {\n                this._stopPolling();\n            }\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/universal-cookie/esm/index.mjs\n");

/***/ })

};
;