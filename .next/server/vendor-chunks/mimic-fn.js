"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mimic-fn";
exports.ids = ["vendor-chunks/mimic-fn"];
exports.modules = {

/***/ "(ssr)/./node_modules/mimic-fn/index.js":
/*!****************************************!*\
  !*** ./node_modules/mimic-fn/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nconst copyProperty = (to, from, property, ignoreNonConfigurable)=>{\n    // `Function#length` should reflect the parameters of `to` not `from` since we keep its body.\n    // `Function#prototype` is non-writable and non-configurable so can never be modified.\n    if (property === \"length\" || property === \"prototype\") {\n        return;\n    }\n    // `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.\n    if (property === \"arguments\" || property === \"caller\") {\n        return;\n    }\n    const toDescriptor = Object.getOwnPropertyDescriptor(to, property);\n    const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);\n    if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {\n        return;\n    }\n    Object.defineProperty(to, property, fromDescriptor);\n};\n// `Object.defineProperty()` throws if the property exists, is not configurable and either:\n//  - one its descriptors is changed\n//  - it is non-writable and its value is changed\nconst canCopyProperty = function(toDescriptor, fromDescriptor) {\n    return toDescriptor === undefined || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);\n};\nconst changePrototype = (to, from)=>{\n    const fromPrototype = Object.getPrototypeOf(from);\n    if (fromPrototype === Object.getPrototypeOf(to)) {\n        return;\n    }\n    Object.setPrototypeOf(to, fromPrototype);\n};\nconst wrappedToString = (withName, fromBody)=>`/* Wrapped ${withName}*/\\n${fromBody}`;\nconst toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, \"toString\");\nconst toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, \"name\");\n// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.\n// We use `bind()` instead of a closure for the same reason.\n// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.\nconst changeToString = (to, from, name)=>{\n    const withName = name === \"\" ? \"\" : `with ${name.trim()}() `;\n    const newToString = wrappedToString.bind(null, withName, from.toString());\n    // Ensure `to.toString.toString` is non-enumerable and has the same `same`\n    Object.defineProperty(newToString, \"name\", toStringName);\n    Object.defineProperty(to, \"toString\", {\n        ...toStringDescriptor,\n        value: newToString\n    });\n};\nconst mimicFn = (to, from, { ignoreNonConfigurable = false } = {})=>{\n    const { name } = to;\n    for (const property of Reflect.ownKeys(from)){\n        copyProperty(to, from, property, ignoreNonConfigurable);\n    }\n    changePrototype(to, from);\n    changeToString(to, from, name);\n    return to;\n};\nmodule.exports = mimicFn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWltaWMtZm4vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxlQUFlLENBQUNDLElBQUlDLE1BQU1DLFVBQVVDO0lBQ3pDLDZGQUE2RjtJQUM3RixzRkFBc0Y7SUFDdEYsSUFBSUQsYUFBYSxZQUFZQSxhQUFhLGFBQWE7UUFDdEQ7SUFDRDtJQUVBLG9NQUFvTTtJQUNwTSxJQUFJQSxhQUFhLGVBQWVBLGFBQWEsVUFBVTtRQUN0RDtJQUNEO0lBRUEsTUFBTUUsZUFBZUMsT0FBT0Msd0JBQXdCLENBQUNOLElBQUlFO0lBQ3pELE1BQU1LLGlCQUFpQkYsT0FBT0Msd0JBQXdCLENBQUNMLE1BQU1DO0lBRTdELElBQUksQ0FBQ00sZ0JBQWdCSixjQUFjRyxtQkFBbUJKLHVCQUF1QjtRQUM1RTtJQUNEO0lBRUFFLE9BQU9JLGNBQWMsQ0FBQ1QsSUFBSUUsVUFBVUs7QUFDckM7QUFFQSwyRkFBMkY7QUFDM0Ysb0NBQW9DO0FBQ3BDLGlEQUFpRDtBQUNqRCxNQUFNQyxrQkFBa0IsU0FBVUosWUFBWSxFQUFFRyxjQUFjO0lBQzdELE9BQU9ILGlCQUFpQk0sYUFBYU4sYUFBYU8sWUFBWSxJQUM3RFAsYUFBYVEsUUFBUSxLQUFLTCxlQUFlSyxRQUFRLElBQ2pEUixhQUFhUyxVQUFVLEtBQUtOLGVBQWVNLFVBQVUsSUFDckRULGFBQWFPLFlBQVksS0FBS0osZUFBZUksWUFBWSxJQUN4RFAsQ0FBQUEsYUFBYVEsUUFBUSxJQUFJUixhQUFhVSxLQUFLLEtBQUtQLGVBQWVPLEtBQUs7QUFFdkU7QUFFQSxNQUFNQyxrQkFBa0IsQ0FBQ2YsSUFBSUM7SUFDNUIsTUFBTWUsZ0JBQWdCWCxPQUFPWSxjQUFjLENBQUNoQjtJQUM1QyxJQUFJZSxrQkFBa0JYLE9BQU9ZLGNBQWMsQ0FBQ2pCLEtBQUs7UUFDaEQ7SUFDRDtJQUVBSyxPQUFPYSxjQUFjLENBQUNsQixJQUFJZ0I7QUFDM0I7QUFFQSxNQUFNRyxrQkFBa0IsQ0FBQ0MsVUFBVUMsV0FBYSxDQUFDLFdBQVcsRUFBRUQsU0FBUyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztBQUV2RixNQUFNQyxxQkFBcUJqQixPQUFPQyx3QkFBd0IsQ0FBQ2lCLFNBQVNDLFNBQVMsRUFBRTtBQUMvRSxNQUFNQyxlQUFlcEIsT0FBT0Msd0JBQXdCLENBQUNpQixTQUFTQyxTQUFTLENBQUNFLFFBQVEsRUFBRTtBQUVsRiwwRkFBMEY7QUFDMUYsNERBQTREO0FBQzVELDBHQUEwRztBQUMxRyxNQUFNQyxpQkFBaUIsQ0FBQzNCLElBQUlDLE1BQU0yQjtJQUNqQyxNQUFNUixXQUFXUSxTQUFTLEtBQUssS0FBSyxDQUFDLEtBQUssRUFBRUEsS0FBS0MsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUM1RCxNQUFNQyxjQUFjWCxnQkFBZ0JZLElBQUksQ0FBQyxNQUFNWCxVQUFVbkIsS0FBS3lCLFFBQVE7SUFDdEUsMEVBQTBFO0lBQzFFckIsT0FBT0ksY0FBYyxDQUFDcUIsYUFBYSxRQUFRTDtJQUMzQ3BCLE9BQU9JLGNBQWMsQ0FBQ1QsSUFBSSxZQUFZO1FBQUMsR0FBR3NCLGtCQUFrQjtRQUFFUixPQUFPZ0I7SUFBVztBQUNqRjtBQUVBLE1BQU1FLFVBQVUsQ0FBQ2hDLElBQUlDLE1BQU0sRUFBQ0Usd0JBQXdCLEtBQUssRUFBQyxHQUFHLENBQUMsQ0FBQztJQUM5RCxNQUFNLEVBQUN5QixJQUFJLEVBQUMsR0FBRzVCO0lBRWYsS0FBSyxNQUFNRSxZQUFZK0IsUUFBUUMsT0FBTyxDQUFDakMsTUFBTztRQUM3Q0YsYUFBYUMsSUFBSUMsTUFBTUMsVUFBVUM7SUFDbEM7SUFFQVksZ0JBQWdCZixJQUFJQztJQUNwQjBCLGVBQWUzQixJQUFJQyxNQUFNMkI7SUFFekIsT0FBTzVCO0FBQ1I7QUFFQW1DLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0Ly4vbm9kZV9tb2R1bGVzL21pbWljLWZuL2luZGV4LmpzPzQ1ODIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb3B5UHJvcGVydHkgPSAodG8sIGZyb20sIHByb3BlcnR5LCBpZ25vcmVOb25Db25maWd1cmFibGUpID0+IHtcblx0Ly8gYEZ1bmN0aW9uI2xlbmd0aGAgc2hvdWxkIHJlZmxlY3QgdGhlIHBhcmFtZXRlcnMgb2YgYHRvYCBub3QgYGZyb21gIHNpbmNlIHdlIGtlZXAgaXRzIGJvZHkuXG5cdC8vIGBGdW5jdGlvbiNwcm90b3R5cGVgIGlzIG5vbi13cml0YWJsZSBhbmQgbm9uLWNvbmZpZ3VyYWJsZSBzbyBjYW4gbmV2ZXIgYmUgbW9kaWZpZWQuXG5cdGlmIChwcm9wZXJ0eSA9PT0gJ2xlbmd0aCcgfHwgcHJvcGVydHkgPT09ICdwcm90b3R5cGUnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gYEZ1bmN0aW9uI2FyZ3VtZW50c2AgYW5kIGBGdW5jdGlvbiNjYWxsZXJgIHNob3VsZCBub3QgYmUgY29waWVkLiBUaGV5IHdlcmUgcmVwb3J0ZWQgdG8gYmUgcHJlc2VudCBpbiBgUmVmbGVjdC5vd25LZXlzYCBmb3Igc29tZSBkZXZpY2VzIGluIFJlYWN0IE5hdGl2ZSAoIzQxKSwgc28gd2UgZXhwbGljaXRseSBpZ25vcmUgdGhlbSBoZXJlLlxuXHRpZiAocHJvcGVydHkgPT09ICdhcmd1bWVudHMnIHx8IHByb3BlcnR5ID09PSAnY2FsbGVyJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHRvRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG8sIHByb3BlcnR5KTtcblx0Y29uc3QgZnJvbURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGZyb20sIHByb3BlcnR5KTtcblxuXHRpZiAoIWNhbkNvcHlQcm9wZXJ0eSh0b0Rlc2NyaXB0b3IsIGZyb21EZXNjcmlwdG9yKSAmJiBpZ25vcmVOb25Db25maWd1cmFibGUpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodG8sIHByb3BlcnR5LCBmcm9tRGVzY3JpcHRvcik7XG59O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5KClgIHRocm93cyBpZiB0aGUgcHJvcGVydHkgZXhpc3RzLCBpcyBub3QgY29uZmlndXJhYmxlIGFuZCBlaXRoZXI6XG4vLyAgLSBvbmUgaXRzIGRlc2NyaXB0b3JzIGlzIGNoYW5nZWRcbi8vICAtIGl0IGlzIG5vbi13cml0YWJsZSBhbmQgaXRzIHZhbHVlIGlzIGNoYW5nZWRcbmNvbnN0IGNhbkNvcHlQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0b0Rlc2NyaXB0b3IsIGZyb21EZXNjcmlwdG9yKSB7XG5cdHJldHVybiB0b0Rlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCB8fCB0b0Rlc2NyaXB0b3IuY29uZmlndXJhYmxlIHx8IChcblx0XHR0b0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZyb21EZXNjcmlwdG9yLndyaXRhYmxlICYmXG5cdFx0dG9EZXNjcmlwdG9yLmVudW1lcmFibGUgPT09IGZyb21EZXNjcmlwdG9yLmVudW1lcmFibGUgJiZcblx0XHR0b0Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID09PSBmcm9tRGVzY3JpcHRvci5jb25maWd1cmFibGUgJiZcblx0XHQodG9EZXNjcmlwdG9yLndyaXRhYmxlIHx8IHRvRGVzY3JpcHRvci52YWx1ZSA9PT0gZnJvbURlc2NyaXB0b3IudmFsdWUpXG5cdCk7XG59O1xuXG5jb25zdCBjaGFuZ2VQcm90b3R5cGUgPSAodG8sIGZyb20pID0+IHtcblx0Y29uc3QgZnJvbVByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmcm9tKTtcblx0aWYgKGZyb21Qcm90b3R5cGUgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0bykpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YodG8sIGZyb21Qcm90b3R5cGUpO1xufTtcblxuY29uc3Qgd3JhcHBlZFRvU3RyaW5nID0gKHdpdGhOYW1lLCBmcm9tQm9keSkgPT4gYC8qIFdyYXBwZWQgJHt3aXRoTmFtZX0qL1xcbiR7ZnJvbUJvZHl9YDtcblxuY29uc3QgdG9TdHJpbmdEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycpO1xuY29uc3QgdG9TdHJpbmdOYW1lID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsICduYW1lJyk7XG5cbi8vIFdlIGNhbGwgYGZyb20udG9TdHJpbmcoKWAgZWFybHkgKG5vdCBsYXppbHkpIHRvIGVuc3VyZSBgZnJvbWAgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuLy8gV2UgdXNlIGBiaW5kKClgIGluc3RlYWQgb2YgYSBjbG9zdXJlIGZvciB0aGUgc2FtZSByZWFzb24uXG4vLyBDYWxsaW5nIGBmcm9tLnRvU3RyaW5nKClgIGVhcmx5IGFsc28gYWxsb3dzIGNhY2hpbmcgaXQgaW4gY2FzZSBgdG8udG9TdHJpbmcoKWAgaXMgY2FsbGVkIHNldmVyYWwgdGltZXMuXG5jb25zdCBjaGFuZ2VUb1N0cmluZyA9ICh0bywgZnJvbSwgbmFtZSkgPT4ge1xuXHRjb25zdCB3aXRoTmFtZSA9IG5hbWUgPT09ICcnID8gJycgOiBgd2l0aCAke25hbWUudHJpbSgpfSgpIGA7XG5cdGNvbnN0IG5ld1RvU3RyaW5nID0gd3JhcHBlZFRvU3RyaW5nLmJpbmQobnVsbCwgd2l0aE5hbWUsIGZyb20udG9TdHJpbmcoKSk7XG5cdC8vIEVuc3VyZSBgdG8udG9TdHJpbmcudG9TdHJpbmdgIGlzIG5vbi1lbnVtZXJhYmxlIGFuZCBoYXMgdGhlIHNhbWUgYHNhbWVgXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdUb1N0cmluZywgJ25hbWUnLCB0b1N0cmluZ05hbWUpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodG8sICd0b1N0cmluZycsIHsuLi50b1N0cmluZ0Rlc2NyaXB0b3IsIHZhbHVlOiBuZXdUb1N0cmluZ30pO1xufTtcblxuY29uc3QgbWltaWNGbiA9ICh0bywgZnJvbSwge2lnbm9yZU5vbkNvbmZpZ3VyYWJsZSA9IGZhbHNlfSA9IHt9KSA9PiB7XG5cdGNvbnN0IHtuYW1lfSA9IHRvO1xuXG5cdGZvciAoY29uc3QgcHJvcGVydHkgb2YgUmVmbGVjdC5vd25LZXlzKGZyb20pKSB7XG5cdFx0Y29weVByb3BlcnR5KHRvLCBmcm9tLCBwcm9wZXJ0eSwgaWdub3JlTm9uQ29uZmlndXJhYmxlKTtcblx0fVxuXG5cdGNoYW5nZVByb3RvdHlwZSh0bywgZnJvbSk7XG5cdGNoYW5nZVRvU3RyaW5nKHRvLCBmcm9tLCBuYW1lKTtcblxuXHRyZXR1cm4gdG87XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1pbWljRm47XG4iXSwibmFtZXMiOlsiY29weVByb3BlcnR5IiwidG8iLCJmcm9tIiwicHJvcGVydHkiLCJpZ25vcmVOb25Db25maWd1cmFibGUiLCJ0b0Rlc2NyaXB0b3IiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmcm9tRGVzY3JpcHRvciIsImNhbkNvcHlQcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwidW5kZWZpbmVkIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJjaGFuZ2VQcm90b3R5cGUiLCJmcm9tUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIndyYXBwZWRUb1N0cmluZyIsIndpdGhOYW1lIiwiZnJvbUJvZHkiLCJ0b1N0cmluZ0Rlc2NyaXB0b3IiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nTmFtZSIsInRvU3RyaW5nIiwiY2hhbmdlVG9TdHJpbmciLCJuYW1lIiwidHJpbSIsIm5ld1RvU3RyaW5nIiwiYmluZCIsIm1pbWljRm4iLCJSZWZsZWN0Iiwib3duS2V5cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mimic-fn/index.js\n");

/***/ })

};
;